// vim: set syntax=groovy sts=2 ts=8 et:

apply plugin: 'de.jfalk.gradle.cpp'

apply plugin: 'visual-studio'
//apply plugin: 'eclipse'

// Here, ``this'' is the current org.gradle.api.Project
//this.buildDir = 'obj-gradle'

task VisualStudio(dependsOn: 'systemcvpcVisualStudio')

import java.util.regex.Matcher 

class WrapXSDandDTDFiles extends DefaultTask {
  @InputFiles      FileCollection srcXSDandDTDFiles
  @OutputDirectory File           headerDir
  @OutputDirectory File           sourceDir

  @TaskAction
  void processIdlFiles() {
    srcXSDandDTDFiles.files.each { File f ->
      def m = f.name =~ /^(.*)\.(xsd|dtd)$/
      assert m instanceof Matcher
      assert m
//    println m.group(1) + ":" + m.group(2)
      File output = new File(headerDir, m.group(1)+"-"+m.group(2)+".c");
      output.text = '';
      if (m.group(2) == 'xsd') {
        output.append("static char const "+m.group(1)+"XSD[] =\n");
      } else {
        output.append("static char const "+m.group(1)+"DTD[] =\n");
      }
      f.eachLine { line ->
        String quotedLine = line.replaceAll(/["\\]/) { c -> '\\'+c }
        output.append("  \""+quotedLine+"\\n\"\n")
      }
      output.append("  ;\n");
    }
  }
}

task wrapVpcDTD(type: WrapXSDandDTDFiles) {
  description       = "Wrap vpc.dtd into c file for consumption by the systemcvpc library."
  srcXSDandDTDFiles = project.files("vpc.dtd")
  headerDir         = project.file("${buildDir}/src/systemcvpc/cpp")
  sourceDir         = project.file("${buildDir}/src/systemcvpc/cpp")
}

class GenerateSystemCVPCConfigH extends DefaultTask {
  @InputFile       File templateFile
  @OutputDirectory File headerDir
  @OutputDirectory File sourceDir
  // The associated binary for the generated config header.
  Binary                binary;

  @TaskAction
  void generateSysteMoCConfigH() {
    def m = templateFile.path =~ /[\/\\]headers[\/\\](.*)\.in$/
    assert m instanceof Matcher
    assert m
    File output = new File(headerDir, m.group(1))
    output.parentFile.mkdirs()
    output.text = '';
//  println binary.flavor
    templateFile.eachLine { line ->
      def mline = line =~ /#undef ([^ ]*)/;
//    String quotedLine = line.replaceAll(/["\\]/) { c -> '\\'+c }
      if (mline) {
//      if (mline.group(1) == 'SYSTEMOC_VERSION') {
//        output.append("#define "+mline.group(1)+" \"1.0\"\n")
//      } else if (mline.group(1) == 'SYSTEMOC_MAJOR_VERSION') {
//        output.append("#define "+mline.group(1)+" \"1\"\n")
//      } else if (mline.group(1) == 'SYSTEMOC_MINOR_VERSION') {
//        output.append("#define "+mline.group(1)+" \"0\"\n")
//      } else if (mline.group(1) == 'SYSTEMOC_MICRO_VERSION') {
//        output.append("#define "+mline.group(1)+" \"0\"\n")
//      } else if (mline.group(1) == 'SYSTEMOC_ENABLE_DEBUG') {
//        if (binary.buildType.name == 'debug') {
//          output.append("#define "+mline.group(1)+" yes\n")
//        } else {
//          output.append("/* #undef "+mline.group(1)+" */\n")
//        }
//      } else if (mline.group(1) == 'SYSTEMOC_ENABLE_SGX') {
//        if (binary.flavor.name.matches('(?i).*sgx.*')) {
//          output.append("#define "+mline.group(1)+" yes\n")
//        } else {
//          output.append("/* #undef "+mline.group(1)+" */\n")
//        }
//      } else if (mline.group(1) == 'SYSTEMOC_ENABLE_VPC') {
//        if (binary.flavor.name.matches('(?i).*vpc.*')) {
//          output.append("#define "+mline.group(1)+" yes\n")
//        } else {
//          output.append("/* #undef "+mline.group(1)+" */\n")
//        }
//      } else if (mline.group(1) == 'SYSTEMOC_ENABLE_MAESTRO') {
//        if (binary.flavor.name.matches('(?i).*maestro.*')) {
//          output.append("#define "+mline.group(1)+" yes\n")
//        } else {
//          output.append("/* #undef "+mline.group(1)+" */\n")
//        }
//      } else {
//      {
          output.append("/* unknown definition "+line+" */\n")
//      }
      } else {
        output.append(line+"\n")
      }
    }
  }
}

model {
  buildTypes {
    debug
    release
  }
  platforms {
    "linux_x86" {
      architecture "x86"
      operatingSystem "linux"
    }
    "linux_x86-64" {
      architecture "x86-64"
      operatingSystem "linux"
    }
    "windows_x86" {
      architecture "x86"
      operatingSystem "windows"
    }
    "windows_x86-64" {
      architecture "x86-64"
      operatingSystem "windows"
    }
  }
  components {
    "systemcvpc"(JFNativeLibrarySpec) {
      sources {
        cpp {
          source {
            exclude "**/*"
          }
          generatedBy tasks.wrapVpcDTD // We need to generate some sources
        }
      }
      binaries.all {
        def binary          = it
        def configHeaderDir = new File(namingScheme.getOutputDirectory(new File(buildDir, "src")), "headers")
        sources {
          cpp(JFCppSourceSet) {
            source {
              srcDirs "src/systemcvpc/cpp"
              include "**/*.cpp"
            }
            implicitHeaders {
              srcDirs "src/systemcvpc/cpp"
              srcDirs wrapVpcDTD.headerDir
              include "**/*.hpp", "**/*.h"
            }
            exportedHeaders {
              srcDirs "src/systemcvpc/headers"
              srcDirs configHeaderDir
              include "**/*.hpp", "**/*.h"
            }
            lib project: ':PrebuiltLibraries', library: "boost_headers", flavor: "default", exportHeaders: true
            lib project: ':PrebuiltLibraries', library: "boost_filesystem", flavor: "default"
            lib project: ':Support', library: 'cosupport-systemc', exportHeaders: true
            lib project: ':Support', library: 'cosupport-xerces', exportHeaders: true
            lib project: ':Support', library: 'cosupport-streams', exportHeaders: true
            lib project: ':Support', library: 'cosupport-tracing', exportHeaders: true
//          lib project: ':Support', library: 'cosupport-smartptr', exportHeaders: true
//          lib project: ':Support', library: 'cosupport-allocators', exportHeaders: true
//          lib project: ':Support', library: 'cosupport-string', exportHeaders: true
          }
        }
        tasks.create(tasks.taskName('configHeaderGeneration'), GenerateSystemCVPCConfigH.class) { task ->
          sources.cpp.generatedBy task
          task.description  = "Generate smoc_config.h for the selected configuration of the libsystemoc binary."
          task.templateFile = project.file("src/systemcvpc/headers/systemcvpc/vpc_config.h.in")
          task.headerDir    = configHeaderDir
          task.sourceDir    = configHeaderDir
          task.binary       = binary
        }
        tasks.withType(CppCompile) {
          includes "src/systemcvpc/cpp"
          includes wrapVpcDTD.headerDir
        }
      }
      binaries.withType(SharedLibraryBinarySpec) {
        sources.cpp.exportedCompilerArgs.define "SYSTEMCVPC_DLL_IMPORT"
        if (targetPlatform.operatingSystem.name == 'linux') {
          linker.args "-ldl"
        }
        cppCompiler.define "SYSTEMCVPC_DLL_EXPORT"
      }
    }
  }
  binaries {
    all {
//    analysis("binary", it)
//    println "TOOLCHAIN: " + toolChain
      // Specify toolchain-agnostic stuff
      if (buildType.name == 'release') {
        cppCompiler.define "NDEBUG"
      }
      // Define toolchain-specific compiler and linker options
      if (toolChain in VisualCpp) {
        // Enable standard C++ exception for visual studio
        cppCompiler.args "/EHsc" //, '/I"C:/Program Files (x86)/Windows Kits/10/Include/10.0.10586.0/ucrt/"'
        linker.args "/LIBPATH:" + rootProject.childProjects.get('PrebuiltLibraries').projectDir + "\\i686-msvc120-win\\libboost-1_55\\lib"
        if (buildType.name == 'debug') {
          cppCompiler.args "/Z7", "/MDd"
          linker.args "/DEBUG"
        } else {
          cppCompiler.args "/MD"
        }
      } else if (toolChain in Gcc) {
        cppCompiler.args "-Wall", "-std=gnu++11"
        cCompiler.args "-Wall", "-std=gnu99"
        linker.args "-Xlinker", "-S"
        if (buildType.name == 'debug') {
          cppCompiler.args "-ggdb"
          cCompiler.args "-ggdb"
        } else {
          cppCompiler.args "-O2"
          cCompiler.args "-O2"
        }
      }
    }
    // For any executable built with Visual C++, use the console subsystem of windows!
    withType(NativeExecutableBinarySpec) {
      if (toolChain in VisualCpp) {
        linker.args "/SUBSYSTEM:CONSOLE"
      }
    }
  }
}
