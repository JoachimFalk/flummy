// vim: set syntax=groovy sts=2 ts=8 et:
// -*- tab-width:8; indent-tabs-mode:nil; c-basic-offset:2; -*-
/*
 * Copyright (c)
 *   2020 FAU -- Joachim Falk <joachim.falk@fau.de>
 *   2021 FAU -- Joachim Falk <joachim.falk@fau.de>
 * 
 *   This library is free software; you can redistribute it and/or modify it under
 *   the terms of the GNU Lesser General Public License as published by the Free
 *   Software Foundation; either version 2 of the License, or (at your option) any
 *   later version.
 * 
 *   This library is distributed in the hope that it will be useful, but WITHOUT
 *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *   FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 *   details.
 * 
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this library; if not, write to the Free Software Foundation, Inc.,
 *   59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

// Here, ``this'' is the current org.gradle.api.Project
//this.buildDir = 'obj-gradle'

import java.util.regex.Matcher

class JavaWrapXSDandDTDFiles extends DefaultTask {
    String                          inPackage;
    @InputFiles      FileCollection srcXSDandDTDFiles
    @OutputDirectory File           sourceDir

    @TaskAction
    void action() {
        srcXSDandDTDFiles.files.each { File f ->
            def m = f.name =~ /^(.*)\.(xsd|dtd)$/
            assert m instanceof Matcher
            assert m
            String className = m.group(1).capitalize()+m.group(2).toUpperCase();
            //    println m.group(1) + ":" + m.group(2)
            File output = new File(sourceDir, className+".java");
            output.text = "package " + inPackage + ";\n\n" +
                "class "+className+" {\n" +
                "    public static final String text = \"\"\n";
            f.eachLine { line ->
                String quotedLine = line.replaceAll(/["\\]/) { c -> '\\'+c }
                output.append("      + \""+quotedLine+"\\n\"\n")
            }
            output.append("    ;\n}\n");
        }
    }
}

plugins {
    id 'java-library'
}

if (javaBuild) {

repositories {
  maven {
      name "jitpack"
      url 'https://jitpack.io'
  }
  mavenCentral()
}

compileJava {
    options.debug = true
}

dependencies {
    if ((rootProject.subprojects.findAll { it.name == "opendse" }).isEmpty()) {
        implementation 'com.github.JoachimFalk:dse-opendse:21f735bf01'
    } else {
        implementation project(':opendse')
    }
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    implementation group: 'org.jdom', name: 'jdom', version: '1.1.3'
}

task javaWrapVPCDTD(type: JavaWrapXSDandDTDFiles) {
    description       = "Wrap vpc.dtd into java file for consumption by the VPCEvaluator."
    inPackage         = "de.fau.scd.VPC.io"
    srcXSDandDTDFiles = parent.project.files("vpc.dtd")
    sourceDir         = project.file("${buildDir}/src/main/java/de/fau/scd/VPC/io")
}

task javaWrapSNGXSD(type: JavaWrapXSDandDTDFiles) {
    description       = "Wrap sng.xsd into java file for consumption by the SNGReader."
    inPackage         = "de.fau.scd.VPC.io"
    srcXSDandDTDFiles = files("src/main/resources/sng.xsd")
    sourceDir         = project.file("${buildDir}/src/main/java/de/fau/scd/VPC/io")
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "${buildDir}/src/main/java"
        }
    }
}

compileJava.dependsOn javaWrapVPCDTD
compileJava.dependsOn javaWrapSNGXSD

}
