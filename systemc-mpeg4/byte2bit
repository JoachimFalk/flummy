actor byte2bit[int] () int in8 ==> int out :

  action in8:[i] ==> out:[ b7, b6, b5, b4, b3, b2, b1, b0 ]
  var
    int b7 = bitand( rshift( i, 7 ), 1 ),
    int b6 = bitand( rshift( i, 6 ), 1 ),
    int b5 = bitand( rshift( i, 5 ), 1 ),
    int b4 = bitand( rshift( i, 4 ), 1 ),
    int b3 = bitand( rshift( i, 3 ), 1 ),
    int b2 = bitand( rshift( i, 2 ), 1 ),
    int b1 = bitand( rshift( i, 1 ), 1 ),
    int b0 = bitand(              i, 1 )
  end

end

/*************************************************************/

class byte2bit: public smoc_actor {
public:
  smoc_port_in<int> in8;
  smoc_port_out<int> out;
private:
  void action0() {
    out[0] = (in8[0] >> 7) & 1; 
    out[1] = (in8[0] >> 6) & 1;
    out[2] = (in8[0] >> 5) & 1;
    out[3] = (in8[0] >> 4) & 1;
    out[4] = (in8[0] >> 3) & 1;
    out[5] = (in8[0] >> 2) & 1;
    out[6] = (in8[0] >> 1) & 1;
    out[7] = (in8[0] >> 0) & 1;
  } 
  smoc_firing_state start;
public:
  byte2bit(sc_module_name name)
    : smoc_actor(name, start) {
    start = (in8.getAvailableTokens() >= 1) >>
		 call(&byte2bit::action0) 	   >> start;
  }
};


