#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_INIT(SysteMoC, 0.1, falk@cs.fau.de)
AC_PREREQ(2.57)
ACJF_INIT

AC_CONFIG_SRCDIR([SystemC-Examples.txt])

AC_CONFIG_AUX_DIR([../BuildSystem])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_LANG([C++])

dnl Checks for programs.
ACJF_CHECK_CROSSTOOL( CC, gcc)
ACJF_CHECK_CROSSTOOL( CXX, g++)
ACJF_CHECK_CROSSTOOL( AR, ar)
ACJF_CHECK_CROSSTOOL( RANLIB, ranlib)
ACJF_CHECK_CROSSTOOL( NM, nm)
AC_PROG_CXXCPP
AC_PROG_CPP
# Checks for programs.
#AC_PROG_LIBTOOL
#AC_PROG_INSTALL
#AC_PROG_LN_S
#AC_PROG_MAKE_SET

ACJF_ARG_DEBUG([yes], [], [-DNDEBUG])

AC_ARG_ENABLE(synthesis-support,
  [  --enable-synthesis-support     Turn on Support for synth target in selected examples],
  [case "${enableval}" in
    yes) synth=true ;;
    no)  synth=false ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-synthesis-support) ;;
   esac],
  [synth=false])
AM_CONDITIONAL(SYNTH, test x$synth = xtrue)

AM_INIT_AUTOMAKE
AC_CONFIG_HEADER([config.h])

AC_DISABLE_SHARED
AM_PROG_LIBTOOL

dnl check for exe extension
AC_EXEEXT

ACJF_CHECK_LIB_SYSTEMC
AM_CPPFLAGS="$AM_CPPFLAGS $SYSTEMC_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $SYSTEMC_LDFLAGS"

ACJF_CHECK_LIB_BOOST
AM_CPPFLAGS="$AM_CPPFLAGS $BOOST_INCLUDE"
AM_LDFLAGS="$AM_LDFLAGS   $BOOST_LDFLAGS"

ACJF_NEED_PKG([Support])
ACJF_NEED_PKG([SysteMoC],
  [AM_CPPFLAGS="$AM_CPPFLAGS -I$acjf_pkg_builddir/include/systemoc";
   AM_LDFLAGS="$AM_LDFLAGS -L$acjf_pkg_builddir";
   SYSTEMOC_DEPENDENCIES="$acjf_pkg_builddir/libsystemoc.la";]
)
AC_SUBST([SYSTEMOC_DEPENDENCIES])
# Backward compatibility cruft
SYSTEMOC_INCLUDE=""
AC_SUBST([SYSTEMOC_INCLUDE])
SYSTEMOC_LDFLAGS=""
AC_SUBST([SYSTEMOC_LDFLAGS])

acjf_CPPFLAGS="$CPPFLAGS"

# Rape idiot autoconf
acjf_builddir=`pwd`
CPPFLAGS=`echo $AM_CPPFLAGS | sed -e "s@\\$(top_srcdir)@$srcdir@g" -e "s@\\$(top_builddir)@$acjf_builddir@g"`

# Checks for header files.
AC_CHECK_HEADER(
  [smoc_md_port.hpp],
  [enable_wsdf=true; AM_CPPFLAGS="$AM_CPPFLAGS -DSMOC_ENABLE_WSDF";],
  [enable_wsdf=false]
)
CPPFLAGS="$acjf_CPPFLAGS"


# AC_FUNC_ALLOCA
# AC_HEADER_STDC
# AC_CHECK_HEADERS([OS.h fcntl.h limits.h mach/mach.h malloc.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

### SystemC-VPC ###
# --enable-vpc option
AC_ARG_ENABLE(
  [vpc],
  [[  --enable-vpc            enable vpc support for SysteMoC [default=yes]]],
  [case "$enableval" in
     yes) enable_vpc=yes ;;
     no)  enable_vpc=no  ;;
     *)   enable_vpc=no  ;;
   esac],
  [enable_vpc=yes # default]
)

if test x"$enable_vpc" = x"yes"; then
  SYSTEMC_VPC_INCLUDE=" \
    -I\$(top_builddir)/../SysteMoC/include/systemoc \
    -I\$(top_builddir)/../SystemC-VPC/include/systemcvpc \
    $SYSTEMC_INCLUDE"

  SYSTEMC_VPC_LDFLAGS=" \
    -L\$(top_builddir)/../SystemC-VPC \
    -lsystemcvpc \
    $SYSTEMC_LDFLAGS"

  SYSTEMC_VPC_DEPENDENCIES=" \
    \$(top_builddir)/../SystemC-VPC/libsystemcvpc.la"

  CPPFLAGS="$CPPFLAGS -DENABLE_SYSTEMC_VPC"
  
  AC_CONFIG_FILES([vpc-test-h261/Makefile])

#FIXME: (Hack) TraceLog only exists in SysteMoc <- this is only needed for InfiniBand HCA "hybrid mode"
#because of this vpc-test-h261 doesn't compile
#  subdirs="$subdirs vpc-test-h261"
else
  SYSTEMC_VPC_INCLUDE=""
  SYSTEMC_VPC_LDFLAGS=""
  SYSTEMC_VPC_DEPENDENCIES=""
fi
if test -d $srcdir/systemoc-sr; then
  AC_CONFIG_FILES([systemoc-sr/Makefile])
#  subdirs="$subdirs systemoc-sr"
fi

AC_SUBST([SYSTEMC_VPC_INCLUDE])
AC_SUBST([SYSTEMC_VPC_LDFLAGS])
AC_SUBST([SYSTEMC_VPC_DEPENDENCIES])

AC_CONFIG_FILES([Makefile])

if test -d $srcdir/idct2d-ref; then
  AC_CONFIG_FILES([idct2d-ref/Makefile])
  subdirs="$subdirs idct2d-ref"
fi
if test -d $srcdir/systemc-idct; then
  AC_CONFIG_FILES([systemc-idct/Makefile])
# subdirs="$subdirs systemc-idct"
fi
if test -d $srcdir/mpeg4-ref; then
  AC_CONFIG_FILES([mpeg4-ref/Makefile])
  subdirs="$subdirs mpeg4-ref"
fi
if test -d $srcdir/systemoc-idct2d; then
  AC_CONFIG_FILES([systemoc-idct2d/Makefile])
  subdirs="$subdirs systemoc-idct2d"
fi
if test -d $srcdir/systemoc-mpeg4; then
  AC_CONFIG_FILES([systemoc-mpeg4/Makefile])
# subdirs="$subdirs systemoc-mpeg4"
fi
if test -d $srcdir/systemoc-csp; then
  AC_CONFIG_FILES([systemoc-csp/Makefile])
# subdirs="$subdirs systemoc-csp"
fi
if test -d $srcdir/systemoc-sdf; then
  AC_CONFIG_FILES([systemoc-sdf/Makefile])
  subdirs="$subdirs systemoc-sdf"
fi
if test -d $srcdir/systemoc-getValueAt; then
  AC_CONFIG_FILES([systemoc-getValueAt/Makefile])
  subdirs="$subdirs systemoc-getValueAt"
fi
if test -d $srcdir/systemoc-sdf-clustering; then
  AC_CONFIG_FILES([systemoc-sdf-clustering/Makefile])
  subdirs="$subdirs systemoc-sdf-clustering"
fi
if test -d $srcdir/systemoc-sqr; then
  AC_CONFIG_FILES([systemoc-sqr/Makefile])
  subdirs="$subdirs systemoc-sqr"
fi
if test -d $srcdir/systemoc-par; then
  AC_CONFIG_FILES([systemoc-par/Makefile])
  subdirs="$subdirs systemoc-par"
fi    
if test -d $srcdir/systemoc-sqr-double; then
  AC_CONFIG_FILES([systemoc-sqr-double/Makefile])
  subdirs="$subdirs systemoc-sqr-double"
fi
if test -d $srcdir/systemoc-fir; then
  AC_CONFIG_FILES([systemoc-fir/Makefile])
  subdirs="$subdirs systemoc-fir"
fi
if test -d $srcdir/systemoc-src-snk; then
  AC_CONFIG_FILES([systemoc-src-snk/Makefile])
  subdirs="$subdirs systemoc-src-snk"
fi
if test -d $srcdir/systemoc-src-snk-noconsume; then
  AC_CONFIG_FILES([systemoc-src-snk-noconsume/Makefile])
  subdirs="$subdirs systemoc-src-snk-noconsume"
fi
if test -d $srcdir/systemoc-select; then
  AC_CONFIG_FILES([systemoc-select/Makefile])
  subdirs="$subdirs systemoc-select"
fi
if test -d $srcdir/systemoc-ibtest; then
  AC_CONFIG_FILES([systemoc-ibtest/Makefile])
# subdirs="$subdirs systemoc-ibtest"
fi
if test -d $srcdir/systemoc-td-sim-test; then
  AC_CONFIG_FILES([systemoc-td-sim-test/Makefile])
# subdirs="$subdirs systemoc-td-sim-test"
fi
if test -d $srcdir/systemoc-mpeg4-teich-v2; then
  AC_CONFIG_FILES([systemoc-mpeg4-teich-v2/Makefile])
# subdirs="$subdirs systemoc-mpeg4-teich-v2"
fi
if test -d $srcdir/crypto-example; then
  AC_CONFIG_FILES([crypto-example/Makefile])
  subdirs="$subdirs crypto-example"
fi
if test x$enable_wsdf = xtrue; then
  if test -d $srcdir/systemoc-wsdf; then
    AC_CONFIG_FILES([systemoc-wsdf/Makefile])
    subdirs="$subdirs systemoc-wsdf"
  fi
  if test -d $srcdir/systemoc-wsdf-expr; then
    AC_CONFIG_FILES([systemoc-wsdf-expr/Makefile])
    subdirs="$subdirs systemoc-wsdf-expr"
  fi
  if test -d $srcdir/systemoc-wsdf-recons-dila; then
    AC_CONFIG_FILES([systemoc-wsdf-recons-dila/Makefile])
    subdirs="$subdirs systemoc-wsdf-recons-dila"
  fi
  if test -d $srcdir/systemoc-wsdf-src-snk; then
    AC_CONFIG_FILES([systemoc-wsdf-src-snk/Makefile])
    subdirs="$subdirs systemoc-wsdf-src-snk"
  fi
  if test -d $srcdir/systemoc-wsdf-dist; then
    AC_CONFIG_FILES([systemoc-wsdf-dist/Makefile])
    subdirs="$subdirs systemoc-wsdf-dist"
  fi
fi

SUBDIRS=$subdirs
AC_SUBST(SUBDIRS)

ACJF_DONE

AC_OUTPUT
